# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")

module_output_path = "hiviewdfx/hicollie"
hicollie_part_path = "//base/hiviewdfx/hicollie"

###############################################################################
config("module_private_config") {
  visibility = [ ":*" ]
  include_dirs = [
    ".",
    "${hicollie_part_path}/frameworks/native",
    "${hicollie_part_path}/frameworks/native/test",
    "${hicollie_part_path}/interfaces/native/innerkits/include/xcollie",
  ]
}

##############################unittest##########################################
ohos_unittest("XCollieUnitTest") {
  module_out_path = module_output_path
  sources = [ "xcollie_interface_test.cpp" ]

  configs = [ ":module_private_config" ]

  deps = [ "//third_party/googletest:gtest_main" ]
  external_deps = [
    "c_utils:utils",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
  ]
}

ohos_unittest("WatchdogUnitTest") {
  module_out_path = module_output_path
  sources = [ "watchdog_interface_test.cpp" ]

  configs = [ ":module_private_config" ]

  deps = [ "//third_party/googletest:gtest_main" ]
  external_deps = [
    "c_utils:utils",
    "ffrt:libffrt",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
  ]

  defines = []
  if (defined(global_parts_info) &&
      defined(global_parts_info.notification_eventhandler)) {
    external_deps += [ "eventhandler:libeventhandler" ]
    defines += [ "EVENTHANDLER_ENABLE" ]
  }
}

ohos_unittest("WatchdogInnerUnitTest") {
  module_out_path = module_output_path
  sources = [ "watchdog_inner_test.cpp" ]

  configs = [ ":module_private_config" ]

  deps = [ "//third_party/googletest:gtest_main" ]
  external_deps = [
    "c_utils:utils",
    "ffrt:libffrt",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
  ]

  defines = []
  if (defined(global_parts_info) &&
      defined(global_parts_info.notification_eventhandler)) {
    external_deps += [ "eventhandler:libeventhandler" ]
    defines += [ "EVENTHANDLER_ENABLE" ]
  }
  if (defined(global_parts_info) &&
      defined(global_parts_info.hiviewdfx_hiview)) {
    external_deps += [ "hiview:libucollection_client" ]
    defines += [ "HIVIEW_ENABLE" ]
  }
}

ohos_unittest("HandlerCheckerTest") {
  module_out_path = module_output_path
  sources = [ "handler_checker_test.cpp" ]

  configs = [ ":module_private_config" ]

  deps = [ "//third_party/googletest:gtest_main" ]
  external_deps = [
    "c_utils:utils",
    "ffrt:libffrt",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
  ]

  defines = []
  if (defined(global_parts_info) &&
      defined(global_parts_info.notification_eventhandler)) {
    external_deps += [ "eventhandler:libeventhandler" ]
    defines += [ "EVENTHANDLER_ENABLE" ]
  }
}

ohos_unittest("WatchdogTaskTest") {
  module_out_path = module_output_path
  sources = [ "watchdog_task_test.cpp" ]

  configs = [ ":module_private_config" ]

  deps = [ "//third_party/googletest:gtest_main" ]
  external_deps = [
    "c_utils:utils",
    "ffrt:libffrt",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
  ]

  defines = []
  if (defined(global_parts_info) &&
      defined(global_parts_info.notification_eventhandler)) {
    external_deps += [ "eventhandler:libeventhandler" ]
    defines += [ "EVENTHANDLER_ENABLE" ]
  }
}

ohos_unittest("ThreadSamplerTest") {
  module_out_path = module_output_path
  sources = [ "thread_sampler_test.cpp" ]
  configs = [ ":module_private_config" ]
  deps = [ "//third_party/googletest:gtest_main" ]
  external_deps = [
    "c_utils:utils",
    "faultloggerd:libasync_stack",
    "faultloggerd:libunwinder",
    "ffrt:libffrt",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
  ]
}

###############################################################################
group("unittest") {
  testonly = true
  deps = [
    # deps file
    ":HandlerCheckerTest",
    ":ThreadSamplerTest",
    ":WatchdogInnerUnitTest",
    ":WatchdogTaskTest",
    ":WatchdogUnitTest",
    ":XCollieUnitTest",
  ]
}
###############################################################################
